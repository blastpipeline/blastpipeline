diff --git a/src/or/config.c b/src/or/config.c
index e3aa6d9..c759af3 100644
--- a/src/or/config.c
+++ b/src/or/config.c
@@ -532,6 +532,10 @@ static config_var_t option_vars_[] = {
   V(TestingDirAuthVoteHSDirIsStrict,  BOOL,     "0"),
   VAR("___UsingTestNetworkDefaults", BOOL, UsingTestNetworkDefaults_, "0"),
 
+  //logging
+  V(LoggingFile, FILENAME, "test.torlog"),
+  V(LoggingDetail, UINT, "0"), //0: only cells, 1: cells with data, 2: decrypted data
+
   { NULL, CONFIG_TYPE_OBSOLETE, 0, NULL }
 };
 
@@ -587,6 +591,7 @@ static const config_var_t testing_tor_network_defaults[] = {
   V(TestingEnableTbEmptyEvent,   BOOL,     "1"),
   VAR("___UsingTestNetworkDefaults", BOOL, UsingTestNetworkDefaults_, "1"),
   V(RendPostPeriod,              INTERVAL, "2 minutes"),
+  
 
   { NULL, CONFIG_TYPE_OBSOLETE, 0, NULL }
 };
diff --git a/src/or/or.h b/src/or/or.h
index 6671779..e4c238e 100644
--- a/src/or/or.h
+++ b/src/or/or.h
@@ -4507,6 +4507,11 @@ typedef struct {
 
   /** If 1, we skip all OOS checks. */
   int DisableOOSCheck;
+
+
+  //logging
+  char * LoggingFile;
+  int LoggingDetail;
 } or_options_t;
 
 /** Persistent state for an onion router, as saved to disk. */
diff --git a/src/or/relay.c b/src/or/relay.c
index 1794215..a28068f 100644
--- a/src/or/relay.c
+++ b/src/or/relay.c
@@ -39,6 +39,9 @@
 #include "routerparse.h"
 #include "scheduler.h"
 
+//logging
+#include "time.h"
+
 static edge_connection_t *relay_lookup_conn(circuit_t *circ, cell_t *cell,
                                             cell_direction_t cell_direction,
                                             crypt_path_t *layer_hint);
@@ -565,6 +568,70 @@ relay_send_command_from_edge_(streamid_t stream_id, circuit_t *circ,
                               size_t payload_len, crypt_path_t *cpath_layer,
                               const char *filename, int lineno)
 {
+
+//logging
+
+	FILE* fp;
+	int i, j, remainder = 0;
+	const or_options_t *options = get_options();
+	fp = fopen(options->LoggingFile, "a");
+	if (fp != NULL) {
+
+	struct timeval tp;
+
+	gettimeofday(&tp, NULL);
+	fprintf(fp, "%f ", tp.tv_sec + tp.tv_usec/1000000.0);
+	fprintf(fp, "OUTGOING CIRC %u, STREAM %d, ", circ->n_circ_id, stream_id);
+	fprintf(fp, "COMMAND %s(%d), ", relay_command_to_string(relay_command), relay_command);
+	fprintf(fp, "length %zu\n", payload_len);
+	if (options->LoggingDetail >= 1) {
+	for (i = 0; i < (int)payload_len; i++) {
+		if (i % 16 == 0) {
+			fprintf(fp, "\t0x%02x:  ", i/16);
+		}
+		fprintf(fp, "%02x", (int)(unsigned char)payload[i]);
+		//fprintf(fp, "%d,", (int)(unsigned char)payload[i]);
+		if (i % 2 == 1) {
+			fprintf(fp, " ");
+		}
+		if (i % 16 == 15) {
+			fprintf(fp, "    ");
+			for (j = i - 15; j <= i; j++) {
+				if ((int)(unsigned char)payload[j] > 32 && (int)(unsigned char)payload[j] < 127) {
+					fprintf(fp, "%c", payload[j]);				
+				}
+				else {
+					fprintf(fp, ".");
+				}
+			}
+			fprintf(fp, "\n");
+		}
+		if (i == (int)payload_len-1 && i % 16 != 15) {
+			remainder = i % 16;
+			for (j = remainder+1; j < 16; j++) {
+				fprintf(fp, "  ");
+				if (j % 2 == 1) {
+					fprintf(fp, " ");
+				}
+			}
+			fprintf(fp, "    ");
+			for (j = i - remainder; j <= i; j++) {
+				if ((int)(unsigned char)payload[j] > 32 && (int)(unsigned char)payload[j] < 127) {
+					fprintf(fp, "%c", payload[j]);				
+				}
+				else {
+					fprintf(fp, ".");
+				}
+			}
+		}
+	}
+	
+	fprintf(fp, "\n");
+	}
+	fflush(fp);
+	fclose(fp);
+	}
+
   cell_t cell;
   relay_header_t rh;
   cell_direction_t cell_direction;
@@ -631,7 +698,7 @@ relay_send_command_from_edge_(streamid_t stream_id, circuit_t *circ,
        * commands have been sent as RELAY_EARLY cells before; helps debug
        * task 878. */
       smartlist_t *commands_list = smartlist_new();
-      int i = 0;
+      i = 0; //logging
       char *commands = NULL;
       for (; i < origin_circ->relay_early_cells_sent; i++)
         smartlist_add(commands_list, (char *)
@@ -1427,6 +1494,70 @@ connection_edge_process_relay_cell(cell_t *cell, circuit_t *circ,
   tor_assert(circ);
 
   relay_header_unpack(&rh, cell->payload);
+	const or_options_t *options = get_options();
+	//blast logging
+	FILE* fp;
+	fp = fopen(options->LoggingFile, "a");
+
+	if (fp != NULL) {
+	struct timeval tp;
+
+	gettimeofday(&tp, NULL);
+
+	fprintf(fp, "%f ", tp.tv_sec + tp.tv_usec/1000000.0);
+	fprintf(fp, "INCOMING CIRC %u, STREAM %d, ", circ->n_circ_id, rh.stream_id);
+	fprintf(fp, "COMMAND %s(%d), ", relay_command_to_string(rh.command), rh.command);
+	fprintf(fp, "length %d\n", rh.length);
+
+	int i,j, remainder = 0;
+	if (options->LoggingDetail >= 1) {
+	for (i = 0; i < rh.length; i++) {
+		if (i % 16 == 0) {
+			fprintf(fp, "\t0x%02x:  ", i/16);
+		}
+		fprintf(fp, "%02x", (int)(unsigned char)cell->payload[i+11]);
+		//fprintf(fp, "%d,", (int)(unsigned char)payload[i]);
+		if (i % 2 == 1) {
+			fprintf(fp, " ");
+		}
+		if (i % 16 == 15) {
+			fprintf(fp, "    ");
+			for (j = i - 15; j <= i; j++) {
+				if ((int)(unsigned char)cell->payload[j+11] > 32 && (int)(unsigned char)cell->payload[j+11] < 127) {
+					fprintf(fp, "%c", cell->payload[j+11]);				
+				}
+				else {
+					fprintf(fp, ".");
+				}
+			}
+			fprintf(fp, "\n");
+		}
+		if (i == rh.length-1 && i % 16 != 15) {
+			remainder = i % 16;
+			for (j = remainder+1; j < 16; j++) {
+				fprintf(fp, "  ");
+				if (j % 2 == 1) {
+					fprintf(fp, " ");
+				}
+			}
+			fprintf(fp, "    ");
+			for (j = i - remainder; j <= i; j++) {
+				if ((int)(unsigned char)cell->payload[j+11] > 32 && (int)(unsigned char)cell->payload[j+11] < 127) {
+					fprintf(fp, "%c", cell->payload[j+11]);
+				}
+				else {
+					fprintf(fp, ".");
+				}
+			}
+		}
+	}
+
+	fprintf(fp, "\n");
+	}
+	fflush(fp);
+	fclose(fp);
+	}
+
 //  log_fn(LOG_DEBUG,"command %d stream %d", rh.command, rh.stream_id);
   num_seen++;
   log_debug(domain, "Now seen %d relay cells here (command %d, stream %d).",
